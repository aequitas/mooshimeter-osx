//
//  DeviceCommandStreamTests.swift
//  mooshimeter-osx
//
//  Created by Dev on 5/18/17.
//  Copyright Â© 2017 alfishe. All rights reserved.
//

import XCTest
import Foundation
@testable import mooshimeter_osx

class DeviceCommandStreamTests: XCTestCase
{
  let deviceManager = DeviceManager.sharedInstance
  var device: Device? = nil
  
  override func setUp()
  {
    super.setUp()
    
    clear()
    
    let UUID = "1234567890"
    let device = Device(UUID: UUID)
    deviceManager.addMeter(device)
    self.device = deviceManager.getDeviceForUUID(UUID)
    XCTAssertNotNil(self.device, "Unable to create Device object")
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  func testSingleCommand()
  {
    let commandStream = self.device?.deviceCommandStream!
    
    //commandStream.
  }
  
  func testAdminTreeParsing()
  {
    let packets = getTestAdminTreePackets()
    
    // Set initial receive packet num
    self.device!.deviceCommandStream?.receivePacketNum = 0x29
    
    // Traverse all packets available
    for packet in packets
    {
      // Call Device's data entry point each time
      let packetData: Data? = Data(bytes: packet)
      self.device!.handleReadData(packetData)
    }

  }
  
  func testFullParsingCycle()
  {
    let packets = getTestBLEPackets()
    
    // Set initial receive packet num
    self.device!.deviceCommandStream?.receivePacketNum = 0xf8
    
    // Traverse all packets available
    for packet in packets
    {
      // Call Device's data entry point each time
      let packetData: Data? = Data(bytes: packet)
      self.device!.handleReadData(packetData)
    }
  }
  
  //MARK: -
  //MARK: Helper methods
  
  fileprivate func clear()
  {
    deviceManager.devices.removeAll(keepingCapacity: false)
    deviceManager.devicesReverse.removeAll(keepingCapacity: false)
  }
  
  fileprivate func getTestBLEPackets() -> [[UInt8]]
  {
    var result = [[UInt8]]()
    //result.append([0xf5, 0xff, 0xff, 0xff, 0xff, 0xff]) // Invalid packet to skip
    result.append([0xf9, 0x05, 0xc6, 0xd9, 0x1c, 0x59, 0x06, 0x49, 0x00, 0x19, 0x80, 0x24, 0x0c, 0x3d, 0x21, 0x4e, 0x88, 0xc7, 0x41, 0x27])
    result.append([0xfa, 0x5c, 0x7a, 0x5a, 0x3f])
    result.append([0xfb, 0x19, 0x80, 0x24, 0x0c, 0x3d])
    
    return result
  }
  
  fileprivate func getTestAdminTreePackets() ->[[UInt8]]
  {
    var result = [[UInt8]]()
    result.append([0x2a, 0x01, 0xb0, 0x01, 0x78, 0x9c, 0xc5, 0x52, 0x5b, 0x8e, 0xdb, 0x30, 0x0c, 0x64, 0x24, 0xbf, 0x62, 0xa3, 0x3d, 0x4a])
    result.append([0x2b, 0x60, 0x3b, 0x9b, 0x60, 0x7f, 0x65, 0x9b, 0x71, 0x04, 0xe8, 0x61, 0x48, 0xb4, 0x77, 0xf7, 0xcb, 0xf7, 0xbf, 0x45])
    result.append([0x2c, 0x29, 0x67, 0xdb, 0xa2, 0x27, 0xe8, 0x0f, 0x39, 0x82, 0x24, 0xce, 0x90, 0x43, 0x80, 0x1f, 0x90, 0xab, 0xc9, 0x6a])
    result.append([0x2d, 0x27, 0xf3, 0x7c, 0x0c, 0xe3, 0xb5, 0x87, 0x3a, 0xa3, 0x80, 0x08, 0xe7, 0x7a, 0xd2, 0x6a, 0x76, 0x3e, 0x92, 0x1e])
    result.append([0x2e, 0x41, 0x36, 0xcb, 0x38, 0xec, 0x1b, 0x86, 0xa8, 0xbd, 0x83, 0x73, 0xe6, 0x94, 0x45, 0xc8, 0x2b, 0xd2, 0x16, 0xf7])
    result.append([0x2f, 0x95, 0x46, 0xc8, 0x9a, 0xdf, 0x70, 0xb7, 0x11, 0x9a, 0x7c, 0x50, 0xb4, 0x6f, 0x20, 0x8a, 0x80, 0x83, 0xf7, 0x24])
    result.append([0x30, 0xa0, 0x70, 0x3e, 0x58, 0x65, 0x00, 0xaa, 0xf8, 0xd4, 0x8b, 0xf5, 0x13, 0x26, 0xa8, 0xec, 0x62, 0xb4, 0x9b, 0xa5])
    result.append([0x31, 0xc8, 0x82, 0x22, 0x2c, 0x41, 0x76, 0xfd, 0x0d, 0x40, 0xf6, 0xb7, 0x96, 0xe3, 0xad, 0xe5, 0x98, 0x75, 0xed, 0x91])
    result.append([0x32, 0xfa, 0x57, 0x7a, 0x7b, 0xa5, 0xf7, 0x94, 0x44, 0x3e, 0xe1, 0x42, 0xcf, 0x0c, 0x04, 0x6b, 0x06, 0x71, 0x7f, 0x83])
    result.append([0x33, 0xf4, 0xff, 0xfd, 0xf8, 0x7f, 0x07, 0x51, 0x52, 0xd0, 0xf3, 0x8c, 0x41, 0x82, 0xf4, 0x8f, 0x07, 0x40, 0x11, 0x99])
    result.append([0x34, 0xc9, 0x30, 0x6d, 0x3d, 0x7a, 0x47, 0xda, 0xad, 0x7e, 0x8d, 0xfc, 0xd6, 0xf8, 0xb9, 0x90, 0x82, 0x7b, 0xca, 0x2a])
    result.append([0x35, 0xed, 0x08, 0xc3, 0xc6, 0x22, 0x65, 0x11, 0x49, 0x11, 0x5f, 0xcb, 0x72, 0xf1, 0xc6, 0x4c, 0x3a, 0x30, 0xa7, 0x76])
    result.append([0x36, 0x0f, 0x2f, 0xb3, 0x5c, 0xbb, 0x09, 0x3f, 0xb9, 0x73, 0x74, 0xd3, 0x9e, 0x5a, 0x86, 0xbc, 0x74, 0xfb, 0xf0, 0x45])
    result.append([0x37, 0x18, 0x13, 0x05, 0x0f, 0x4e, 0xd9, 0xbf, 0xaf, 0x0a, 0x66, 0x8e, 0x48, 0x3c, 0xd1, 0x49, 0x91, 0x62, 0xb6, 0xf1])
    result.append([0x38, 0xd9, 0x55, 0xa2, 0xb4, 0x6a, 0x59, 0x52, 0xdb, 0x50, 0x8e, 0x6b, 0x08, 0xe8, 0xe8, 0x04, 0xa2, 0x4b, 0x7d, 0x11])
    result.append([0x39, 0xda, 0xe5, 0x04, 0xf2, 0xca, 0xfd, 0x9f, 0x8a, 0xf8, 0x54, 0x01, 0x27, 0xd6, 0x10, 0x94, 0x9b, 0x71, 0xd7, 0x20])
    result.append([0x3a, 0x2a, 0xe5, 0x94, 0xf9, 0x8a, 0x3a, 0x4a, 0xc8, 0x2c, 0x2a, 0xc7, 0x05, 0x83, 0x4d, 0xbc, 0xc3, 0xfa, 0x78, 0x60])
    result.append([0x3b, 0xe0, 0xb1, 0xb3, 0xfa, 0x15, 0xa1, 0xf9, 0xc3, 0x2b, 0xf9, 0x86, 0x2b, 0x70, 0xdc, 0x87, 0x85, 0x7d, 0xf9, 0x99])
    result.append([0x3c, 0x90, 0x89, 0x43, 0xef, 0x14, 0xe9, 0x0d, 0x0f, 0x45, 0xfd, 0x3f, 0x8a, 0x36, 0x6f, 0x48, 0xcd, 0x28, 0x78, 0xa0])
    result.append([0x3d, 0xc9, 0x84, 0x7b, 0xfb, 0x5f, 0x74, 0x89, 0x6f, 0x16, 0xc9, 0xbb, 0xb9, 0x7e, 0xee, 0x1b, 0x9b, 0xd8, 0x5e, 0x3a])
    result.append([0x3e, 0x48, 0xf1, 0x9a, 0x6c, 0xbe, 0xb0, 0xe3, 0x75, 0x40, 0xa6, 0x24, 0xe5, 0x46, 0xcc, 0xa1, 0x48, 0x7b, 0x72, 0x61])
    result.append([0x3f, 0xad, 0x65, 0x02, 0x07, 0xaa, 0x0e, 0x74, 0xc0, 0xf3, 0x0b, 0x1e, 0xb8, 0xfe, 0xc6, 0xc7, 0x21, 0x9f, 0x34, 0xaf])
    result.append([0x40, 0xe2, 0xe9, 0x55, 0xb1, 0xa9, 0xd8, 0x3d, 0xb3, 0x2f, 0x1f, 0x01, 0x7e, 0x01, 0xe9, 0x08, 0x90, 0x15])

    return result
  }
}
